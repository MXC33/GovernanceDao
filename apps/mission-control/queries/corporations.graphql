query GlobalWasteSystemOrderInfo($credentials: CredentialsInput!) {
  globalWasteSystemOrderInfo(credentials: $credentials) {
      ... Order
  }
}

query EternaLabsOrderInfo($credentials: CredentialsInput!) {
  eternalLabsOrderInfo(credentials: $credentials) {
      ... Order
  }
}

query NewLandsOrderInfo($credentials: CredentialsInput!) {
  newlandsOrderInfo(credentials: $credentials) {
      ... Order
  }
}

query FacilityUpgradeOrderInfo($credentials: CredentialsInput!) {
  facilityUpgradeOrderInfo(credentials: $credentials) {
      ... Order
  }
}

query MetamodFusionOrderInfo($credentials: CredentialsInput!) {
  metamodFusionOrderInfo(credentials: $credentials) {
      ... Order
  }
}

query FacilityUpgradeCooldown($credentials: CredentialsInput!) {
  cooldownFacilityUpgrade(credentials: $credentials)
}



query GlobalWasteSystemOrderCosts {
  globalWasteSystemOrderCosts {
      ... OrderData
  }
}

query EternaLabsOrderCosts {
  eternalLabsOrderCosts {
      ... OrderData
  }
}

query NewLandsOrderCosts {
  newlandsOrderCosts {
      ... OrderData
  }
}

query FacilityUpgradeOrderCosts {
  facilityUpgradeOrderCosts {
      ... OrderData
  }
}

query MetamodFusionOrderCosts {
  metamodFusionOrderCosts {
      ... OrderData
  }
}

query AssetConverterRecipes {
  assetConverterRecipes {
    ... AssetConverterRecipe
  }
}


fragment Order on Order{
    orderId
    orderAmount
    creationTime
    amountOfSpeedups
    defaultOrderTime
    speedUpTime
    totalOrderTime
    orderTokenId
    type
  }




fragment OrderData on OrderData {
  defaultOrderTime
  variableCosts {
    ...OrderCost
  }
  fixedCosts {
    ...OrderCost
  }
  maxOrder
  ixtSpeedupCost
  astroSpeedupCost
  ixtCooldownSpeedupCost
  cooldownSpeedupTime
  tax {
    ...Tax
  }
  weight {
    ...ProbabilityWeight
  }
  boostedWeight {
    ...ProbabilityWeight
  }
}

fragment Tax on Tax {
  value
  basisPoints
}

fragment OrderCost on OrderCost {
  token {
    ...NFT
  }
  min
  max
  multiplier
}

fragment ProbabilityWeight on ProbabilityWeights {
  token {
    ...NFT
  }
  value
}

fragment AssetConverterRecipe on AssetConverterRecipe {
  recipeId
  recipe {
    ...NFT
  }
  outcome {
    ...NFT
  }
}
