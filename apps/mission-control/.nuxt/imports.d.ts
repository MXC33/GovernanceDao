export { isVue2, isVue3 } from 'vue-demi';
export { useAsyncData, useLazyAsyncData, useNuxtData, refreshNuxtData, clearNuxtData, defineNuxtComponent, useNuxtApp, defineNuxtPlugin, definePayloadPlugin, reloadNuxtApp, useRuntimeConfig, useState, clearNuxtState, useFetch, useLazyFetch, useCookie, useRequestHeaders, useRequestEvent, useRequestFetch, useRequestURL, setResponseStatus, setPageLayout, onNuxtReady, useRouter, useRoute, defineNuxtRouteMiddleware, navigateTo, abortNavigation, addRouteMiddleware, showError, clearError, isNuxtError, useError, createError, defineNuxtLink, useAppConfig, updateAppConfig, defineAppConfig, preloadComponents, preloadRouteComponents, prefetchComponents, loadPayload, preloadPayload, isPrerendered, definePayloadReducer, definePayloadReviver } from '#app';
export { onBeforeRouteLeave, onBeforeRouteUpdate, useLink } from '#vue-router';
export { withCtx, withDirectives, withKeys, withMemo, withModifiers, withScopeId, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onServerPrefetch, onUnmounted, onUpdated, computed, customRef, isProxy, isReactive, isReadonly, isRef, markRaw, proxyRefs, reactive, readonly, ref, shallowReactive, shallowReadonly, shallowRef, toRaw, toRef, toRefs, triggerRef, unref, watch, watchEffect, watchPostEffect, watchSyncEffect, isShallow, effect, effectScope, getCurrentScope, onScopeDispose, defineComponent, defineAsyncComponent, resolveComponent, getCurrentInstance, h, inject, hasInjectionContext, nextTick, provide, defineModel, defineOptions, defineSlots, mergeModels, toValue, useModel, useAttrs, useCssModule, useCssVars, useSlots, useTransitionState, Component, ComponentPublicInstance, ComputedRef, ExtractPropTypes, ExtractPublicPropTypes, InjectionKey, PropType, Ref, MaybeRef, MaybeRefOrGetter, VNode } from 'vue';
export { computedAsync, asyncComputed, computedEager, eagerComputed, computedInject, computedWithControl, controlledComputed, createEventHook, createGlobalState, createInjectionState, createReusableTemplate, createSharedComposable, createTemplatePromise, createUnrefFn, extendRef, isDefined, makeDestructurable, onClickOutside, onKeyStroke, onLongPress, onStartTyping, reactify, createReactiveFn, reactifyObject, reactiveComputed, reactiveOmit, reactivePick, refAutoReset, autoResetRef, refDebounced, useDebounce, debouncedRef, refDefault, refThrottled, useThrottle, throttledRef, refWithControl, controlledRef, syncRef, syncRefs, templateRef, toReactive, resolveRef, resolveUnref, tryOnBeforeMount, tryOnBeforeUnmount, tryOnMounted, tryOnScopeDispose, tryOnUnmounted, unrefElement, until, useActiveElement, useAnimate, useArrayDifference, useArrayEvery, useArrayFilter, useArrayFind, useArrayFindIndex, useArrayFindLast, useArrayIncludes, useArrayJoin, useArrayMap, useArrayReduce, useArraySome, useArrayUnique, useAsyncQueue, useBase64, useBattery, useBluetooth, useBreakpoints, useBroadcastChannel, useBrowserLocation, useCached, useClipboard, useCloned, useColorMode, useConfirmDialog, useCounter, useCssVar, useCurrentElement, useCycleList, useDark, useDateFormat, useDebouncedRefHistory, useDebounceFn, useDeviceMotion, useDeviceOrientation, useDevicePixelRatio, useDevicesList, useDisplayMedia, useDocumentVisibility, useDraggable, useDropZone, useElementBounding, useElementByPoint, useElementHover, useElementSize, useElementVisibility, useEventBus, useEventListener, useEventSource, useEyeDropper, useFavicon, useFileDialog, useFileSystemAccess, useFocus, useFocusWithin, useFps, useFullscreen, useGamepad, useGeolocation, useIdle, useInfiniteScroll, useIntersectionObserver, useInterval, useIntervalFn, useKeyModifier, useLastChanged, useMagicKeys, useManualRefHistory, useMediaControls, useMediaQuery, useMemoize, useMemory, useMounted, useMouse, useMouseInElement, useMousePressed, useMutationObserver, useNavigatorLanguage, useNetwork, useNow, useObjectUrl, useOffsetPagination, useOnline, usePageLeave, useParallax, useParentElement, usePerformanceObserver, usePermission, usePointer, usePointerLock, usePointerSwipe, usePreferredColorScheme, usePreferredContrast, usePreferredDark, usePreferredLanguages, usePreferredReducedMotion, usePrevious, useRafFn, useRefHistory, useResizeObserver, useScreenOrientation, useScreenSafeArea, useScriptTag, useScroll, useScrollLock, useSessionStorage, useShare, useSorted, useSpeechRecognition, useSpeechSynthesis, useStepper, useStorageAsync, useStyleTag, useSupported, useSwipe, useTemplateRefsList, useTextareaAutosize, useTextDirection, useTextSelection, useThrottledRefHistory, useThrottleFn, useTimeAgo, useTimeout, useTimeoutFn, useTimeoutPoll, useTimestamp, useToggle, useToNumber, useToString, useTransition, useUrlSearchParams, useUserMedia, useVibrate, useVirtualList, useVModel, useVModels, useWakeLock, useWebNotification, useWebSocket, useWebWorker, useWebWorkerFn, useWindowFocus, useWindowScroll, useWindowSize, watchArray, watchAtMost, watchDebounced, debouncedWatch, watchDeep, watchIgnorable, ignorableWatch, watchImmediate, watchOnce, watchPausable, pausableWatch, watchThrottled, throttledWatch, watchTriggerable, watchWithFilter, whenever } from '@vueuse/core';
export { useSound } from '@vueuse/sound';
export { injectHead, useHead, useSeoMeta, useHeadSafe, useServerHead, useServerSeoMeta, useServerHeadSafe } from '@unhead/vue';
export { useDefinedContractSetups, defineContract } from '../composables/defineContract';
export { groupBy, categorizeNFTs, usePlural, minimizeString, useWait } from '../composables/helpers';
export { addAdjustableToToken, addStaticPaymentToken, useAdjustableNumber } from '../composables/useAdjustableNumber';
export { useAds } from '../composables/useAds';
export { useAsyncState } from '../composables/useAsyncState';
export { useAvatarBurnedData, useAvatarNFTContract } from '../composables/useAvatarNFTContract';
export { useBaseLevelCapacityData } from '../composables/useBaseLevel';
export { useBuildToolMode, useOverviewToolMode, useOverview, useBuildTools } from '../composables/useBuildTools';
export { useBurnGravityGradeContract } from '../composables/useBurnGravityGrade';
export { useLootChestContract } from '../composables/useBurnLootChest';
export { useBuyNFTs } from '../composables/useBuyNFTs';
export { getGravityGradeSellId, useBuyPacks } from '../composables/useBuypack';
export { useCacheKey } from '../composables/useCacheKey';
export { useOldStakedOnTileData, useClaimAndUnstakeAll } from '../composables/useClaimAndUnstakeAll';
export { useCookieConsentState, useConsentCookie, useCookieState } from '../composables/useCookieAndConsent';
export { useCurrencyData } from '../composables/useCurrencies';
export { useDetectWebm } from '../composables/useDetectWebmSupport';
export { useDraggableMenu } from '../composables/useDraggableMenu';
export { PixState, useGameInterface } from '../composables/useGameInterface';
export { useGenericBurnGravityGradeContracts } from '../composables/useGenericBurnGravityGrade';
export { useGenericBurnGravityGradeV2Contract } from '../composables/useGenericBurnGravityGradeV2';
export { useCanClaimAvatarData, definePackContract, useGenericBurnPixAssetsContract } from '../composables/useGenericBurnPixAssets';
export { useGlitchText } from '../composables/useGlitchText';
export { useGravityGradePackContentData } from '../composables/useGravityGradePackContent';
export { useHelpers, useStateBoolean, clamp, roundToDecimals, useHoursLeft, useDaysLeft, useIntervalWithDays, isNumeric, logServerTime, useRunOnce, useGraphqlCredentials, useGlobalTimestamp, useTimer, IPFSURL, IPFSURLVideo } from '../composables/useHelpers';
export { BASE_API_ENDPOINT_URL, BASE_API_DEV_ENDPOINT_URL, CustomErrors, useIXHeaders, useIXAPI } from '../composables/useIXAPI';
export { useIXLinks } from '../composables/useIXLinks';
export { useIXTSwapVisible } from '../composables/useIXTSwap';
export { useInView } from '../composables/useInView';
export { useInfoBlocks } from '../composables/useInfoBlocks';
export { useInventory } from '../composables/useInventory';
export { useSearchPix, useLandData, useFetchUniqueLand } from '../composables/useLandData';
export { useLocalStorage } from '../composables/useLocalStorage';
export { useAuthUserData, useAuthTokenExpirationTime, useLoginRedirect, useLogin } from '../composables/useLogin';
export { useMapboxPix } from '../composables/useMapboxPix';
export { useMcIXAPI } from '../composables/useMcIXAPI';
export { useMerkleMintContract } from '../composables/useMerkleMintContract';
export { useMobileBreakpoint } from '../composables/useMobile';
export { useTokenBalance, useNFTs } from '../composables/useNFTs';
export { useNeNotifications, useNeMessages, useNotificationSettings } from '../composables/useNeNotificationsAndMessages';
export { useNotifications } from '../composables/useNotifications';
export { usePayment } from '../composables/usePayment';
export { usePlayCanvas } from '../composables/usePlayCanvas';
export { usePopupToken } from '../composables/usePopupToken';
export { usePopups } from '../composables/usePopups';
export { randomLinesGenerator } from '../composables/useRandomLines';
export { useSaleInfoData } from '../composables/useSaleInfo';
export { useSender } from '../composables/useSender';
export { useShuffle } from '../composables/useShuffle';
export { useHeaderData } from '../composables/useSiteHeader';
export { useNotificationsLibrary, useSocket } from '../composables/useSocket';
export { useSoundSettings, usePlaySound } from '../composables/useSound';
export { useStakeMCNFT, useStakeMCGenesisNFT } from '../composables/useStakeMCNFT';
export { useStakeNFTContracts } from '../composables/useStakeNFT';
export { useProposedNFTStakes, useStakeNFTFlow } from '../composables/useStakeNFTFlow';
export { useSiteMenuOpen, useGameMenu, useSiteSettings, useSwapIXT } from '../composables/useStates';
export { useContractHistory } from '../composables/useSwapContracts';
export { useTabList } from '../composables/useTabList';
export { useTaskManagerActiveCorporation, useYSpaceTaskManager, useTaskManager } from '../composables/useTaskManager';
export { useTasks } from '../composables/useTasks';
export { useTech } from '../composables/useTech';
export { useTicket } from '../composables/useTicket';
export { useTileContract } from '../composables/useTileContract';
export { useTileData } from '../composables/useTileData';
export { useTileRentProposal, useAGOLDContract, useAGOLDLiteContract, useTileRent } from '../composables/useTileRent';
export { DistrictRingNameMap, useTileRings } from '../composables/useTileRings';
export { TileRingA, TileRingB, TileRingC1, TileRingC2, TileRingC, TileRings, tileToId, useTileSelection, useTiles } from '../composables/useTiles';
export { useTokenInfoTypeTier, useTokensInfo, useTokenInfo } from '../composables/useTokenInfo';
export { useTransactions } from '../composables/useTransaction';
export { useOpenPacks } from '../composables/useTreasureChest';
export { useUser } from '../composables/useUser';
export { useTokenData, useRoverData, useAsyncGasPrice, useAvatarNFTData, useEthNFTData, useGravityGradeData, usePlayerBaseLevelData, useUserData } from '../composables/useUserData';
export { useActiveChain, useChainInfo, useWallet } from '../composables/useWallet';
export { useConnectors } from '../composables/useWalletConnectors';
export { useWaste } from '../composables/useWaste';
export { useWriter } from '../composables/useWriter';
export { TierColorMap, TierHexColorMap, getTierColor } from '../composables/NFTs/tiers';
export { ContractDistrictMap } from '../composables/NFTs/useContracts';
export { DroneIds, DronePlaycanvasMap } from '../composables/NFTs/useDrones';
export { FacilityLevels, FacilityTokenIdMap, FacilityLevelMap, FacilityOutputCycle, LandTypeEnergyMap, FacilityEnergyByLevelMultiplier, FacilityTierMap, getNextLevelTokenIds } from '../composables/NFTs/useFacility';
export { GenesisCorporationMap, CorporationGenesisMap } from '../composables/NFTs/useGenesisNFT';
export { LandTypes, TerritoryTypes, LandTypeMap, PixTypes } from '../composables/NFTs/useLand';
export { useTileMetaData } from '../composables/NFTs/useOutputMultiplier';
export { RoverTiers, RoverPlaycanvasTierMap, RoverPlaycanvasStatusMap, getRoverWaste, getRoverWasteBRing, getRoverACRepairPrice, getRoverIXTRepairPrice, getRoverRenamePrice, isDefaultRoverName } from '../composables/NFTs/useRovers';
export { genericBurnGravityGradeV2Address, gravityGradeV2WrapperAddress, voucherAddress, assetsConverterAddress, metaModFusionAddress, landmarkAddress, genesisNFTAddress, stakedMissionControlNFTAddress, generic1155StoreAddress, missionControlStreamAddress, superTokenAddress, mintableSuperTokenAddress, superFluidAddress, contractFlowAgreementAddress, maxCoinAddress, genericBurnGravityGradeAddress, genericBurnPixAssetsAddress, USDTManagerAddress, USDCManagerAddress, wrappedEthAddress, IXTAddress, oracleManagerAddress, gravityGradeAddress, tetherAddress, merkleMinterAddress, globalWasteSystemAddress, eternaLabsOldAddress, eternaLabsAddress, newLandsAddress, enterLuckyCatRaffleAddress, placeNFTAdress, oldPlaceNFTAdress, pixAdress, pixStakableAdress, assetStakableAdress, roverStakableAddress, roverAddress, avatarNFTAddress, badgeNFTAddress, assetsAddress, lootChestAdress, burnGravityGradeAdress, facilityUpgradeAdress } from '../composables/NFTs/walletAddresses';
export { useCorporationOrderId, defineOrderContract } from '../composables/corporations/order/defineOrderContract';
export { getWeights, defineOrderData, useCorporationOrderInfoBlocks, orderValueForProbability, useCorporationOrders, useOrderContracts } from '../composables/corporations/order/useCorporationOrders';
export { useAssetConverterRecipesData, useAssetConverter } from '../composables/corporations/useAssetConverterRecipes';
export { useCorporationBurn } from '../composables/corporations/useCorporationBurn';
export { useCorporationCompletion } from '../composables/corporations/useCorporationCompletion';
export { useCorporationLinks } from '../composables/corporations/useCorporationLinks';
export { useCorporationNotifications } from '../composables/corporations/useCorporationNotification';
export { useCorporationRaffle } from '../composables/corporations/useCorporationRaffle';
export { useCorporationRename, useCorporationRepair } from '../composables/corporations/useCorporationService';
export { useCorporationShop } from '../composables/corporations/useCorporationShop';
export { useMaybeStakedTokenState, useStakedEthData, useStakedCorporationGenesis, useStakedTileContract, useStakedDataBalance, useStakeMCNFTData, useStakeGenesisNFTData, useStakeGenesisNFTEthData, useCorporationStake } from '../composables/corporations/useCorporationStake';
export { useCorporationSwap } from '../composables/corporations/useCorporationSwap';
export { Corporations, useActiveCorporation, useCorporationRoute, useCorporations } from '../composables/corporations/useCorporations';
export { useEternalabData, useEternalabCraft, useEternaLabsContracts } from '../composables/corporations/useEternaLabsContracts';
export { useFacilityCooldownTimeleftData, useFacilityUpgradeData, useFacilityUpgrade, useFacilityUpgradeContracts } from '../composables/corporations/useFacilityUpgrade';
export { useGWSData, useGWSCraft, useGlobalWasteSystemContracts } from '../composables/corporations/useGlobalWasteSystemContracts';
export { useLuckyCatContracts, useLuckyCatRaffleData, useLuckyCatRaffle } from '../composables/corporations/useLuckyCatContracts';
export { useMetamodFusionData, useMetamodFusion, useMetamodFusionContracts } from '../composables/corporations/useMetamodFusion';
export { useNewlandsCraft, useNewlandsData, useNewLandsContracts } from '../composables/corporations/useNewLandsContracts';
export { useActiveSpeedupOrder, useSpeedupOrder } from '../composables/corporations/useSpeedup';
export { useTokenWeights } from '../composables/corporations/useTokenWeights';
export { useYSpaceContracts } from '../composables/corporations/useYSpaceContracts';
export { useGqlHeaders, useGqlToken, useGqlCors, useGqlHost, useGql, useGqlError, useAsyncGql } from '../../../node_modules/nuxt-graphql-client/dist/runtime/composables/index';
export { GqlAssetConverterRecipes, GqlAuthed, GqlAvatarNFT, GqlBaseLevelCapacities, GqlBurnedAvatar, GqlCurrencies, GqlEternaLabsOrderCosts, GqlEternaLabsOrderInfo, GqlEthNFTs, GqlFacilityUpgradeCooldown, GqlFacilityUpgradeOrderCosts, GqlFacilityUpgradeOrderInfo, GqlGGPackContent, GqlGlobalWasteSystemOrderCosts, GqlGlobalWasteSystemOrderInfo, GqlGravityGradeNFTBalance, GqlIsGGEligible, GqlLand, GqlLandmarks, GqlLuckyCatRaffle, GqlMetamodFusionOrderCosts, GqlMetamodFusionOrderInfo, GqlNewLandsOrderCosts, GqlNewLandsOrderInfo, GqlOldStakedOnTile, GqlOldWasteNonce, GqlPlayerBaseLevel, GqlRelayerFee, GqlRovers, GqlSaleInfo, GqlStakedGenesisNFT, GqlStakedGenesisNFTEth, GqlStakedMCNFT, GqlStakedOnTile, GqlTokenInfo, GqlTokenInfoTypeTier, GqlTokens, GqlUniqueLandWithInfo, GqlUniquePixWithInfoFromId, GqlWasteNonce, GqlBadgeNFT } from '#gql';
export { useI18n } from '../../../node_modules/vue-i18n/dist/vue-i18n';
export { useRouteBaseName, useLocalePath, useLocaleRoute, useSwitchLocalePath, useLocaleHead, useBrowserLocale, useCookieLocale, defineI18nRoute, defineI18nLocale, defineI18nConfig } from '../../../node_modules/@nuxtjs/i18n/dist/runtime/composables';
export { definePageMeta } from '../../../node_modules/nuxt/dist/pages/runtime/composables';