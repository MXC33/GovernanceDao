export { isVue2, isVue3 } from 'vue-demi';
export { useAsyncData, useLazyAsyncData, useNuxtData, refreshNuxtData, clearNuxtData, defineNuxtComponent, useNuxtApp, defineNuxtPlugin, definePayloadPlugin, reloadNuxtApp, useRuntimeConfig, useState, useFetch, useLazyFetch, useCookie, useRequestHeaders, useRequestEvent, useRequestFetch, setResponseStatus, setPageLayout, onNuxtReady, useRouter, useRoute, defineNuxtRouteMiddleware, navigateTo, abortNavigation, addRouteMiddleware, showError, clearError, isNuxtError, useError, createError, defineNuxtLink, useAppConfig, updateAppConfig, defineAppConfig, preloadComponents, preloadRouteComponents, prefetchComponents, loadPayload, preloadPayload, isPrerendered, definePayloadReducer, definePayloadReviver, onBeforeRouteLeave, onBeforeRouteUpdate } from '#app';
export { withCtx, withDirectives, withKeys, withMemo, withModifiers, withScopeId, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onServerPrefetch, onUnmounted, onUpdated, computed, customRef, isProxy, isReactive, isReadonly, isRef, markRaw, proxyRefs, reactive, readonly, ref, shallowReactive, shallowReadonly, shallowRef, toRaw, toRef, toRefs, triggerRef, unref, watch, watchEffect, isShallow, effect, effectScope, getCurrentScope, onScopeDispose, defineComponent, defineAsyncComponent, resolveComponent, getCurrentInstance, h, inject, nextTick, provide, useAttrs, useCssModule, useCssVars, useSlots, useTransitionState } from 'vue';
export { computedAsync, asyncComputed, computedEager, eagerComputed, computedInject, computedWithControl, controlledComputed, createEventHook, createGlobalState, createInjectionState, createReusableTemplate, createSharedComposable, createTemplatePromise, createUnrefFn, extendRef, isDefined, makeDestructurable, onClickOutside, onKeyStroke, onLongPress, onStartTyping, reactify, createReactiveFn, reactifyObject, reactiveComputed, reactiveOmit, reactivePick, refAutoReset, autoResetRef, refDebounced, useDebounce, debouncedRef, refDefault, refThrottled, useThrottle, throttledRef, refWithControl, controlledRef, syncRef, syncRefs, templateRef, toReactive, resolveRef, resolveUnref, tryOnBeforeMount, tryOnBeforeUnmount, tryOnMounted, tryOnScopeDispose, tryOnUnmounted, unrefElement, until, useActiveElement, useAnimate, useArrayDifference, useArrayEvery, useArrayFilter, useArrayFind, useArrayFindIndex, useArrayFindLast, useArrayIncludes, useArrayJoin, useArrayMap, useArrayReduce, useArraySome, useArrayUnique, useAsyncQueue, useAsyncState, useBase64, useBattery, useBluetooth, useBreakpoints, useBroadcastChannel, useBrowserLocation, useCached, useClipboard, useCloned, useColorMode, useConfirmDialog, useCounter, useCssVar, useCurrentElement, useCycleList, useDark, useDateFormat, useDebouncedRefHistory, useDebounceFn, useDeviceMotion, useDeviceOrientation, useDevicePixelRatio, useDevicesList, useDisplayMedia, useDocumentVisibility, useDraggable, useDropZone, useElementBounding, useElementByPoint, useElementHover, useElementSize, useElementVisibility, useEventBus, useEventListener, useEventSource, useEyeDropper, useFavicon, useFileDialog, useFileSystemAccess, useFocus, useFocusWithin, useFps, useFullscreen, useGamepad, useGeolocation, useIdle, useInfiniteScroll, useIntersectionObserver, useInterval, useIntervalFn, useKeyModifier, useLastChanged, useLocalStorage, useMagicKeys, useManualRefHistory, useMediaControls, useMediaQuery, useMemoize, useMemory, useMounted, useMouse, useMouseInElement, useMousePressed, useMutationObserver, useNavigatorLanguage, useNetwork, useNow, useObjectUrl, useOffsetPagination, useOnline, usePageLeave, useParallax, useParentElement, usePerformanceObserver, usePermission, usePointer, usePointerLock, usePointerSwipe, usePreferredColorScheme, usePreferredContrast, usePreferredDark, usePreferredLanguages, usePreferredReducedMotion, usePrevious, useRafFn, useRefHistory, useResizeObserver, useScreenOrientation, useScreenSafeArea, useScriptTag, useScroll, useScrollLock, useSessionStorage, useShare, useSorted, useSpeechRecognition, useSpeechSynthesis, useStepper, useStorageAsync, useStyleTag, useSupported, useSwipe, useTemplateRefsList, useTextareaAutosize, useTextDirection, useTextSelection, useThrottledRefHistory, useThrottleFn, useTimeAgo, useTimeout, useTimeoutFn, useTimeoutPoll, useTimestamp, useToggle, useToNumber, useToString, useTransition, useUrlSearchParams, useUserMedia, useVibrate, useVirtualList, useVModel, useVModels, useWakeLock, useWebNotification, useWebSocket, useWebWorker, useWebWorkerFn, useWindowFocus, useWindowScroll, useWindowSize, watchArray, watchAtMost, watchDebounced, debouncedWatch, watchDeep, watchIgnorable, ignorableWatch, watchImmediate, watchOnce, watchPausable, pausableWatch, watchThrottled, throttledWatch, watchTriggerable, watchWithFilter, whenever } from '@vueuse/core';
export { useSound } from '@vueuse/sound';
export { injectHead, useHead, useSeoMeta, useHeadSafe, useServerHead, useServerSeoMeta, useServerHeadSafe } from '@unhead/vue';
export { addAdjustableToToken, addStaticPaymentToken, useAdjustableNumber } from '../../ix-base/composables/useAdjustableNumber';
export { useAsyncDataState } from '../../ix-base/composables/useAsyncState';
export { useCookieState } from '../../ix-base/composables/useCookieState';
export { Corporations } from '../../ix-base/composables/useCorporations';
export { IPFSURL, IPFSURLVideo, clamp, roundToDecimals, useHoursLeft, useDaysLeft, useIntervalWithDays, isNumeric, logServerTime, useGlobalTimestamp, useTimer, groupBy, usePlural, useWait, reverseKey } from '../../ix-base/composables/useHelpers';
export { useIXAPI } from '../../ix-base/composables/useIXAPI';
export { useIXLinks } from '../../ix-base/composables/useIXLinks';
export { useAuthUserData, useLogin } from '../../ix-base/composables/useLogin';
export { useSoundSettings, usePlaySound } from '../../ix-base/composables/useSound';
export { useTokenInfo } from '../../ix-base/composables/useTokenInfo';
export { M3taModId, WasteId, AstroId, BluePrintId, LootCrateId, EnergyId, AvatarCardPackId, AOCBadgePackId, AvatarIds, AOCBadgeIds, MCNFTTypes, LandmarkList, getTokenAttribute, useTokenBalance, useTokens, categorizeNFTs, getNFTTokenId } from '../../ix-base/composables/useTokens';
export { useUser, useGraphqlCredentials } from '../../ix-base/composables/useUser';
export { useTokenData, useRoverData, useCurrencyData, useAsyncGasPrice, useEthNFTData, useAvatarNFTData, useBadgeNFTData, usePlayerBaseLevelData, useUserData } from '../../ix-base/composables/useUserData';
export { landmarkAddress, genesisNFTAddress, stakedMissionControlNFTAddress, generic1155StoreAddress, missionControlStreamAddress, superTokenAddress, mintableSuperTokenAddress, superFluidAddress, contractFlowAgreementAddress, maxCoinAddress, genericBurnGravityGradeAddress, genericBurnPixAssetsAddress, USDTManagerAddress, USDCManagerAddress, wrappedEthAddress, IXTAddress, oracleManagerAddress, gravityGradeAddress, tetherAddress, merkleMinterAddress, globalWasteSystemAddress, eternaLabsOldAddress, eternaLabsAddress, newLandsAddress, enterLuckyCatRaffleAddress, placeNFTAdress, oldPlaceNFTAdress, pixAdress, pixStakableAdress, assetStakableAdress, roverStakableAddress, roverAddress, avatarNFTAddress, badgeNFTAddress, assetsAddress, lootChestAdress, burnGravityGradeAdress, facilityUpgradeAdress } from '../../ix-base/composables/Contract/WalletAddresses';
export { CHAIN_NET_ADDRESS, useActiveChain, useWallet } from '../../ix-base/composables/Contract/useWallet';
export { useConnectors } from '../../ix-base/composables/Contract/useWalletConnectors';
export { BadgeTierMap } from '../../ix-base/composables/TokenTypes/Badge';
export { BioModTierMap } from '../../ix-base/composables/TokenTypes/Biomod';
export { ContractIds, ContractTierMap, ContractDistrictMap } from '../../ix-base/composables/TokenTypes/Contract';
export { DroneIds, DroneTierMap, DronePlaycanvasMap, DronePowerRequirement } from '../../ix-base/composables/TokenTypes/Drone';
export { FacilityLevels, FacilityIds, FacilityTierMap, FacilityTokenIdMap, FacilityNameMap, FacilityLevelMap, FacilityOutputCycle } from '../../ix-base/composables/TokenTypes/Facility';
export { GenesisIds, GenesisCorporationMap, CorporationGenesisMap } from '../../ix-base/composables/TokenTypes/Genesis';
export { GravityGradeNFTTypes, getGravityGradeTokenID, CoinbaseTierMap, CargoDropTierMap, GGPackTierMap, StarterPackTierMap, ArcadePackTierMap, AnniversaryTierMap, getGravityGradeType, getGravityGradeToken } from '../../ix-base/composables/TokenTypes/GravityGrade';
export { LandTypes, TerritoryTypes, LandTypeMap, PixTypes } from '../../ix-base/composables/TokenTypes/Land';
export { MetashareCorporationMap } from '../../ix-base/composables/TokenTypes/Metashare';
export { RoverTiers, RoverPlaycanvasTierMap, RoverPlaycanvasStatusMap, isDefaultRoverName } from '../../ix-base/composables/TokenTypes/Rover';
export { TicketTierMap } from '../../ix-base/composables/TokenTypes/Ticket';
export { TierColorMap, TierHexColorMap, getTierColor } from '../../ix-base/composables/TokenTypes/Tier';
export { useGqlHeaders, useGqlToken, useGqlCors, useGqlHost, useGql, useGqlError, useAsyncGql } from '../../../node_modules/nuxt-graphql-client/dist/runtime/composables/index';
export { GqlAuthed, GqlAvatarNFT, GqlBaseLevelCapacities, GqlBurnedAvatar, GqlCurrencies, GqlEternaLabsOrderCosts, GqlEternaLabsOrderInfo, GqlEthNFTs, GqlFacilityUpgradeCooldown, GqlFacilityUpgradeOrderCosts, GqlFacilityUpgradeOrderInfo, GqlGGSaleInfo, GqlGlobalWasteSystemOrderCosts, GqlGlobalWasteSystemOrderInfo, GqlGravityGradeNFTBalance, GqlIsGGEligible, GqlLand, GqlLandmarks, GqlLuckyCatRaffle, GqlNewLandsOrderCosts, GqlNewLandsOrderInfo, GqlOldStakedOnTile, GqlOldWasteNonce, GqlPlayerBaseLevel, GqlRelayerFee, GqlRovers, GqlStakedGenesisNFT, GqlStakedGenesisNFTEth, GqlStakedMCNFT, GqlStakedOnTile, GqlTokenInfo, GqlTokens, GqlUniqueLandWithInfo, GqlUniquePixWithInfoFromId, GqlWasteNonce, GqlBadgeNFT } from '#gql';
export { useI18n } from '../../../node_modules/vue-i18n/dist/vue-i18n';
export { useRouteBaseName, useLocalePath, useLocaleRoute, useSwitchLocalePath, useLocaleHead, useBrowserLocale, useCookieLocale, defineI18nRoute, defineI18nLocale, defineI18nConfig } from '../../../node_modules/@nuxtjs/i18n/dist/runtime/composables';